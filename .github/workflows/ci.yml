name: CI

on:
  pull_request:
  push:
    # branches: [main, staging, trying]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        toolchain: [stable, nightly]
        os: [windows-latest, ubuntu-latest, macos-latest]
        exclude:
          - os: macos-latest
            toolchain: nightly
          - os: windows-latest
            toolchain: nightly
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy
          override: true

      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
        if: runner.os == 'linux'

      - name: Check the format
        # See tools/ci/src/main.rs for the commands this runs
        run: cargo run -p ci
        if: runner.os == 'linux' && matrix.toolchain == 'stable'

      - name: Build & run tests
        run: cargo test --workspace
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

  build-wasm:
    strategy:
      matrix:
        toolchain: [stable, nightly]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: wasm32-unknown-unknown
          override: true

      - name: Check wasm
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --target wasm32-unknown-unknown --no-default-features --features bevy_winit,x11,hdr,bevy_gltf

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Android targets
        run: rustup target add aarch64-linux-android armv7-linux-androideabi
      - name: Install Cargo APK
        run: cargo install cargo-apk
      - name: Build APK
        run: cargo apk build --example android

  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Run Markdown Lint
        uses: github/super-linter@v3.15.2
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_MARKDOWN: true
          DEFAULT_BRANCH: master
          # Not needed here as only one Linter is used.
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run-examples:
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update;
          DEBIAN_FRONTEND=noninteractive sudo apt-get install --no-install-recommends -yq \
            autoconf \
            automake \
            binutils \
            bison \
            build-essential \
            cmake \
            elfutils \
            expat \
            flex \
            gettext \
            git \
            x11proto-gl-dev \
            libdrm-dev \
            libtool \
            libva-dev \
            libx11-dev \
            libxcb-glx0-dev \
            libxdamage-dev \
            libxext-dev \
            libxfixes-dev \
            libxrandr-dev \
            libxshmfence-dev \
            libxt-dev \
            libxvmc-dev \
            libxxf86vm-dev \
            llvm-9 \
            llvm-9-dev \
            lxrandr \
            meson \
            ninja-build \
            python-mako \
            python3-libxml2 \
            python3-mako \
            python3 \
            python3-dev \
            libtalloc-dev \
            libwayland-dev \
            wayland-protocols \
            xorg-dev \
            xorg-server-source \
            x11proto-dev \
            xutils-dev \
            xvfb \
            zlib1g-dev \
            libzstd-dev \
            libzstd1 \
            libasound2-dev \
            libudev-dev \
            libx11-xcb-dev \
            libxcb-dri2-0-dev \
            libxcb-dri3-dev \
            libxcb-present-dev;

      - name: Update CA
        run: DEBIAN_FRONTEND=noninteractive sudo apt-get install --no-install-recommends -yq ca-certificates && sudo update-ca-certificates;

      - name: Build Mesa
        run: |
          set +xe
          mkdir -p /var/tmp/build;
          cd /var/tmp/build/;
          git clone --depth=1 --branch=mesa-20.0.6 https://gitlab.freedesktop.org/mesa/mesa.git;
          cd mesa;
          libtoolize;
          if [ "$(uname -m)" ==  "aarch64" ] || [ "$(uname -m)" == "armv7l" ];
          then
              galium_drivers=swrast;
          else
              galium_drivers=swrast,swr;
          fi ;
          meson \
              --buildtype=release \
              --prefix=/usr/local \
              --sysconfdir=/etc \
              -D b_ndebug=true \
              -D egl=true \
              -D gallium-nine=false \
              -D gallium-xvmc=false \
              -D gbm=true \
              -D gles1=false \
              -D gles2=true \
              -D opengl=true \
              -D dri-drivers-path=/usr/local/lib/xorg/modules/dri \
              -D dri-drivers= \
              -D dri3=true \
              -D egl=false \
              -D gallium-drivers="$galium_drivers" \
              -D gbm=false \
              -D glx=dri \
              -D llvm=true \
              -D lmsensors=false \
              -D optimization=3 \
              -D osmesa=gallium \
              -D platforms=drm,x11,wayland \
              -D shared-glapi=true \
              -D shared-llvm=true \
              -D vulkan-drivers= \
              build/;
          ninja -C build/ -j $(getconf _NPROCESSORS_ONLN);
          ninja -C build/ install;
          ninja -C build/ xmlpool-pot xmlpool-update-po xmlpool-gmo;

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # - name: Build all examples
      #   run: cargo build --examples --features "bevy_debug"

      - name: Setup debug configuration
        run: |
          echo '(exit_after: Some(300))' > debug_config.ron

      - name: Run one example
        run: cargo run --example load_gltf --features "bevy_debug"

      # - name: Run all examples
      #   run: |
      #     for file in target/release/examples/*; do
      #         if [[ -x "$file" ]]; then
      #             if [[ -f "$file" ]]; then
      #                 if [ -z "${file##*wasm*}" ]; then
      #                     echo "ignore $file, wasm";
      #                     continue
      #                 fi
      #                 if [ -z "${file##*android*}" ]; then
      #                     echo "ignore $file, android";
      #                     continue
      #                 fi
      #                 if [ -z "${file##*ios*}" ]; then
      #                     echo "ignore $file, ios";
      #                     continue
      #                 fi
      #                 if [ "$file" = "target/debug/examples/custom_loop" ]; then
      #                     echo "ignore $file, doesn't end";
      #                     continue
      #                 fi
      #                 example=`basename $file`
      #                 cargo run --example $example --features "bevy_debug"
      #                 ret=$?;
      #                 if [ $ret -ne 0 ]; then
      #                     return $ref;
      #                 fi;
      #                 sleep 2
      #             fi;
      #         fi;
      #     done

