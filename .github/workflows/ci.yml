name: CI

on:
  pull_request:
  push:
    # branches: [main, staging, trying]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        toolchain: [stable, nightly]
        os: [windows-latest, ubuntu-latest, macos-latest]
        exclude:
          - os: macos-latest
            toolchain: nightly
          - os: windows-latest
            toolchain: nightly
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy
          override: true

      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
        if: runner.os == 'linux'

      - name: Check the format
        # See tools/ci/src/main.rs for the commands this runs
        run: cargo run -p ci
        if: runner.os == 'linux' && matrix.toolchain == 'stable'

      - name: Build & run tests
        run: cargo test --workspace
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

  build-wasm:
    strategy:
      matrix:
        toolchain: [stable, nightly]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: wasm32-unknown-unknown
          override: true

      - name: Check wasm
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --target wasm32-unknown-unknown --no-default-features --features bevy_winit,x11,hdr,bevy_gltf

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Android targets
        run: rustup target add aarch64-linux-android armv7-linux-androideabi
      - name: Install Cargo APK
        run: cargo install cargo-apk
      - name: Build APK
        run: cargo apk build --example android

  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Run Markdown Lint
        uses: github/super-linter@v3.15.2
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_MARKDOWN: true
          DEFAULT_BRANCH: master
          # Not needed here as only one Linter is used.
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run-examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
        if: runner.os == 'linux'

      # Download, unzip and setup SwiftShader library
      - name: Download SwiftShader
        run: |
          wget https://github.com/qarmin/gtk_library_store/releases/download/3.24.0/swiftshader.zip
          unzip swiftshader.zip
          rm swiftshader.zip
          curr="$(pwd)/libvk_swiftshader.so"
          sed -i "s|PATH_TO_CHANGE|$curr|" vk_swiftshader_icd.json

      - name: Build all examples
        run: cargo build --examples --release --features bevy_debug

      - name: Setup debug configuration
        run: |
          echo '(exit_after: Some(300))' > debug_config.ron

      - name: Run all examples
        run: |
          for file in target/release/examples/*; do
              if [[ -x "$file" ]]; then
                  if [[ -f "$file" ]]; then
                      if [ -z "${file##*wasm*}" ]; then
                          echo "ignore $file, wasm";
                          continue
                      fi
                      if [ -z "${file##*android*}" ]; then
                          echo "ignore $file, android";
                          continue
                      fi
                      if [ -z "${file##*ios*}" ]; then
                          echo "ignore $file, ios";
                          continue
                      fi
                      if [ "$file" = "target/debug/examples/custom_loop" ]; then
                          echo "ignore $file, doesn't end";
                          continue
                      fi
                      example=`basename $file`
                      VK_ICD_FILENAMES=./vk_swiftshader_icd.json cargo run --example $example --release --features bevy_debug
                      ret=$?;
                      if [ $ret -ne 0 ]; then
                          return $ref;
                      fi;
                      sleep 2
                  fi;
              fi;
          done

